USE Campus6

SELECT TD.PERSON_CODE_ID [PEOPLE_CODE_ID]
	,TD.ACADEMIC_YEAR
	,TD.ACADEMIC_TERM
	,TD.ACADEMIC_SESSION
	,TD.EVENT_ID [TD.EVENT_ID]
	,TD.EVENT_SUB_TYPE [TD.EVENT_SUB_TYPE]
	,TD.SECTION [TD.SECTION]
	,SS.[DAY] [SS.DAY]
	,C.DAY_OF_WEEK [C.DAY_OF_WEEK]
	,C.CALENDAR_DATE + C.START_TIME [Start1]
	,C.CALENDAR_DATE + C.END_TIME [End1]
	--,C.CALENDAR_KEY
	--,TD.CREDIT_TYPE [TD.CREDIT_TYPE]
	,TD2.EVENT_ID [TD2.EVENT_ID]
	,TD2.EVENT_SUB_TYPE [TD2.EVENT_SUB_TYPE]
	,TD2.SECTION [TD2.SECTION]
	,SS2.[DAY] [SS2.DAY]
	,C2.DAY_OF_WEEK [C2.DAY_OF_WEEK]
	,C2.CALENDAR_DATE + C2.START_TIME [Start2]
	,C2.CALENDAR_DATE + C2.END_TIME [End2]
	--,C2.CALENDAR_KEY
	--,TD2.CREDIT_TYPE [TD2.CREDIT_TYPE]
	,CASE 
		WHEN DATEDIFF(minute, C.START_TIME, C.END_TIME) > 10
			OR DATEDIFF(minute, C2.START_TIME, C2.END_TIME) > 10
			THEN 'N'
		ELSE 'Y'
		END [Async]
INTO #Conflicts
--First calendar event
FROM SECTIONPER TD
INNER JOIN SECTIONSCHEDULE SS
	ON TD.ACADEMIC_YEAR = SS.ACADEMIC_YEAR
		AND TD.ACADEMIC_TERM = SS.ACADEMIC_TERM
		AND TD.ACADEMIC_SESSION = SS.ACADEMIC_SESSION
		AND TD.EVENT_ID = SS.EVENT_ID
		AND TD.EVENT_SUB_TYPE = SS.EVENT_SUB_TYPE
		AND TD.SECTION = SS.SECTION
--AND TD.ADD_DROP_WAIT = 'A'
INNER JOIN CALENDARDETAIL CD
	ON CD.EVENT_KEY = SS.CALENDARDET_EVENT_KEY
INNER JOIN CALENDAR C
	ON C.EVENT_KEY = CD.EVENT_KEY
--AND DATEDIFF(minute, C.START_TIME, C.END_TIME) > 10 --Exclude async
--Conflicting calendar event
INNER JOIN SECTIONPER TD2
	ON TD.PERSON_CODE_ID = TD2.PERSON_CODE_ID
INNER JOIN SECTIONSCHEDULE SS2
	ON TD2.ACADEMIC_YEAR = SS2.ACADEMIC_YEAR
		AND TD2.ACADEMIC_TERM = SS2.ACADEMIC_TERM
		AND TD2.ACADEMIC_SESSION = SS2.ACADEMIC_SESSION
		AND TD2.EVENT_ID = SS2.EVENT_ID
		AND TD2.EVENT_SUB_TYPE = SS2.EVENT_SUB_TYPE
		AND TD2.SECTION = SS2.SECTION
--AND TD2.ADD_DROP_WAIT = 'A'
INNER JOIN CALENDARDETAIL CD2
	ON CD2.EVENT_KEY = SS2.CALENDARDET_EVENT_KEY
INNER JOIN CALENDAR C2
	ON C2.EVENT_KEY = CD2.EVENT_KEY
WHERE (
		C.CALENDAR_DATE + C.START_TIME BETWEEN C2.CALENDAR_DATE + C2.START_TIME AND C2.CALENDAR_DATE + C2.END_TIME
		OR C.CALENDAR_DATE + C.END_TIME BETWEEN C2.CALENDAR_DATE + C2.START_TIME AND C2.CALENDAR_DATE + C2.END_TIME
		OR C2.CALENDAR_DATE + C2.START_TIME BETWEEN C.CALENDAR_DATE + C.START_TIME AND C.CALENDAR_DATE + C.END_TIME
				--Other method that returns fewer results?
				--C2.CALENDAR_DATE + C2.START_TIME >= C.CALENDAR_DATE + C.START_TIME
				--AND C.CALENDAR_DATE + C.END_TIME >= C2.CALENDAR_DATE + C2.END_TIME
		)
	AND C.CALENDAR_KEY <> C2.CALENDAR_KEY
	AND TD.ACADEMIC_YEAR = '2022'
	AND TD.ACADEMIC_TERM = 'FALL'

--Students with conflicts on specific dates
SELECT PEOPLE_CODE_ID
	,count(*) [Conflicts]
FROM #Conflicts
WHERE 1 = 1
	AND Async = 'N'
	AND cast(Start1 AS DATE) IN (
		'2021-01-21'
		,'2021-02-18'
		)
	AND (
		[SS.DAY] = 'MON'
		AND [SS2.DAY] = 'THUR'
		)
GROUP BY PEOPLE_CODE_ID
ORDER BY PEOPLE_CODE_ID
	,count(*)


--Sections causing conflicts
SELECT PEOPLE_CODE_ID
	,dbo.fnPeopleOrgName(PEOPLE_CODE_ID, 'DN |LN') [Name]
	,[TD.EVENT_ID]
	,[TD.SECTION]
	,(
		SELECT CURRICULUM
		FROM [EVENT] E
		WHERE E.EVENT_ID = [TD.EVENT_ID]
		) [CURRICULUM]
	,[TD2.EVENT_ID]
	,[TD2.SECTION]
	,(
		SELECT CURRICULUM
		FROM [EVENT] E
		WHERE E.EVENT_ID = [TD2.EVENT_ID]
		) [2.CURRICULUM]
FROM #Conflicts C
WHERE 1 = 1
	AND Async = 'N'
	AND LEFT([SS.DAY], 3) = [C.DAY_OF_WEEK]
	AND LEFT([SS2.DAY], 3) = [C2.DAY_OF_WEEK]
	--Exclude cross-tallied sections
	AND NOT EXISTS (
		SELECT *
		FROM sectioncrosstally CT
		WHERE CT.EVENT_ID = [TD.EVENT_ID]
			AND CT.EVENT_SUB_TYPE = [TD.EVENT_SUB_TYPE]
			AND CT.SECTION = [TD.SECTION]
		)
GROUP BY PEOPLE_CODE_ID
	,dbo.fnPeopleOrgName(PEOPLE_CODE_ID, 'DN |LN')
	,[TD.EVENT_ID]
	,[TD.SECTION]
	,[TD2.EVENT_ID]
	,[TD2.SECTION]
ORDER BY PEOPLE_CODE_ID
	,[TD.EVENT_ID]
	,[TD2.EVENT_ID]

DROP TABLE #Conflicts
